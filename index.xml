<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Brandon Dale Koepke</title>
<link>https://finitemoment.com/</link>
<atom:link href="https://finitemoment.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Fri, 08 Nov 2024 08:00:00 GMT</lastBuildDate>
<item>
  <title>Hello World in R from Quarto</title>
  <link>https://finitemoment.com/posts/post-with-code/</link>
  <description><![CDATA[ 





<p>This is a post with executable R code.</p>
<div id="7a6ec4ac" class="cell" data-execution_count="1">
<p><code>{.f# .cell-code} let name = "World" let lang = "FSharp" $"Hello {name} from {lang}!"</code></p>
<div class="cell-output cell-output-display">

<div>
    <div id="dotnet-interactive-this-cell-319185.Microsoft.DotNet.Interactive.Http.HttpPort" style="display: none">
        The below script needs to be able to find the current output cell; this is an easy method to get it.
    </div>
    <script type="text/javascript">
async function probeAddresses(probingAddresses) {
    function timeout(ms, promise) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                reject(new Error('timeout'))
            }, ms)
            promise.then(resolve, reject)
        })
    }

    if (Array.isArray(probingAddresses)) {
        for (let i = 0; i < probingAddresses.length; i++) {

            let rootUrl = probingAddresses[i];

            if (!rootUrl.endsWith('/')) {
                rootUrl = `${rootUrl}/`;
            }

            try {
                let response = await timeout(1000, fetch(`${rootUrl}discovery`, {
                    method: 'POST',
                    cache: 'no-cache',
                    mode: 'cors',
                    timeout: 1000,
                    headers: {
                        'Content-Type': 'text/plain'
                    },
                    body: probingAddresses[i]
                }));

                if (response.status == 200) {
                    return rootUrl;
                }
            }
            catch (e) { }
        }
    }
}

function loadDotnetInteractiveApi() {
    probeAddresses(["http://192.168.1.166:2048/", "http://127.0.0.1:2048/"])
        .then((root) => {
        // use probing to find host url and api resources
        // load interactive helpers and language services
        let dotnetInteractiveRequire = require.config({
        context: '319185.Microsoft.DotNet.Interactive.Http.HttpPort',
                paths:
            {
                'dotnet-interactive': `${root}resources`
                }
        }) || require;

            window.dotnetInteractiveRequire = dotnetInteractiveRequire;

            window.configureRequireFromExtension = function(extensionName, extensionCacheBuster) {
                let paths = {};
                paths[extensionName] = `${root}extensions/${extensionName}/resources/`;
                
                let internalRequire = require.config({
                    context: extensionCacheBuster,
                    paths: paths,
                    urlArgs: `cacheBuster=${extensionCacheBuster}`
                    }) || require;

                return internalRequire
            };
        
            dotnetInteractiveRequire([
                    'dotnet-interactive/dotnet-interactive'
                ],
                function (dotnet) {
                    dotnet.init(window);
                },
                function (error) {
                    console.log(error);
                }
            );
        })
        .catch(error => {console.log(error);});
    }

// ensure `require` is available globally
if ((typeof(require) !==  typeof(Function)) || (typeof(require.config) !== typeof(Function))) {
    let require_script = document.createElement('script');
    require_script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js');
    require_script.setAttribute('type', 'text/javascript');
    
    
    require_script.onload = function() {
        loadDotnetInteractiveApi();
    };

    document.getElementsByTagName('head')[0].appendChild(require_script);
}
else {
    loadDotnetInteractiveApi();
}

    </script>
</div>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>Hello World from FSharp!</code></pre>
</div>
</div>
<pre class="{r}"><code>name = "World"
lang = "R!"
cat("Hello", name, "from", lang)</code></pre>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@misc{dale_koepke2024,
  author = {Dale Koepke, Brandon},
  title = {Hello {World} in {R} from {Quarto}},
  date = {2024-11-08},
  url = {https://finitemoment.com/posts/post-with-code/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-dale_koepke2024" class="csl-entry quarto-appendix-citeas">
Dale Koepke, Brandon. 2024. <span>“Hello World in R from Quarto.”</span>
<em>FiniteMoment</em> (blog). November 8, 2024. <a href="https://finitemoment.com/posts/post-with-code/">https://finitemoment.com/posts/post-with-code/</a>.
</div></div></section></div> ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://finitemoment.com/posts/post-with-code/</guid>
  <pubDate>Fri, 08 Nov 2024 08:00:00 GMT</pubDate>
  <media:content url="https://finitemoment.com/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
